{"version":3,"file":"Comment.stories-bc1e4297.js","sources":["../../src/components/Comment/snippet.js"],"sourcesContent":["export  const  codeSnippet = `import { useEffect, useState, useRef } from \"react\";\r\nimport {Avatar,Box,Typography,Grid,Paper,TextField,InputAdornment,} from \"@mui/material\";\r\nimport ChipComponent from \"../Chip\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\ninterface CommentProps {\r\n  /**\r\n   * Commenter name\r\n   */\r\n  CommentedBy: string;\r\n  /**\r\n   * Text value of the comment or chip status text\r\n   */\r\n  Comment: string;\r\n  /**\r\n   * Input error check\r\n   */\r\n  commentError?: string;\r\n  /**\r\n   * Displays commment value as a status chip\r\n   */\r\n  UseChipToDisplayComment: boolean;\r\n  /**\r\n   * Disabled comment\r\n   */\r\n  CommentDisable: boolean;\r\n  /**\r\n   * Editable status of comment component\r\n   */\r\n  isEditAble: boolean;\r\n}\r\n\r\nconst Comment = ({\r\n  isEditAble = true,\r\n  CommentDisable = false,\r\n  UseChipToDisplayComment = false,\r\n  commentError = 'Error Text',\r\n  Comment = \"Comment Text\",\r\n  CommentedBy = \"User Name\",\r\n} : CommentProps) => {\r\n  const [commentOpen, setCommentOpen] = useState(false);\r\n  const [userComment, setUserComment] = useState(Comment);\r\n  const commentRef = useRef();\r\n\r\n  function handleClickOutside(event: any) {\r\n    if (commentRef.current && !commentRef.current.contains(event.target)) {\r\n      setCommentOpen(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (commentOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [commentRef, commentOpen]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignItems=\"center\"\r\n      direction=\"row\"\r\n      spacing={3}\r\n      wrap=\"nowrap\"\r\n    >\r\n      <Grid item>\r\n        <Avatar variant=\"rounded\" style={{ borderRadius: \"50%\" }}>\r\n          {CommentedBy.charAt(0).toUpperCase()}\r\n        </Avatar>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} style={{ minWidth: 350 }}>\r\n        <Paper variant=\"outlined\">\r\n          <Box p={2}>\r\n            <Grid container direction=\"column\" spacing={2}>\r\n              <Grid container item justifyContent=\"space-between\">\r\n                <Grid item>\r\n                  <Box>\r\n                    <Typography\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: \"bold\" }}\r\n                    >\r\n                      {CommentedBy}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box>\r\n                    <Typography color=\"textSecondary\" variant=\"caption\">\r\n                      12.12.2023\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container item justifyContent=\"space-between\" spacing={1}>\r\n                <Grid item md={12} xs={12}>\r\n                  <Box>\r\n                    {commentOpen === true ? (\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        multiline\r\n                        disabled={CommentDisable}\r\n                        onChange={(e) => {\r\n                          setUserComment(e.target.value);\r\n                        }}\r\n                        inputProps={{ maxLength: 250 }}\r\n                        ref={commentRef}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <EditIcon\r\n                                style={{ cursor: \"pointer\" }}\r\n                                onClick={() => {\r\n                                  setCommentOpen(false);\r\n                                }}\r\n                                fontSize=\"small\"\r\n                              />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        fullWidth\r\n                        value={userComment}\r\n                        style={{ width: \"80%\" }}\r\n                      />\r\n                    ) : (\r\n                      <Typography\r\n                        variant=\"body1\"\r\n                        onClick={(e) => {\r\n                          isEditAble && setCommentOpen(true);\r\n                        }}\r\n                        color=\"textPrimary\"\r\n                        style={{\r\n                          width: \"80%\",\r\n                          whiteSpace: \"pre-wrap\",\r\n                          wordBreak: \"break-all\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-between\",\r\n                        }}\r\n                      >\r\n                        {UseChipToDisplayComment === false &&\r\n                          userComment}{\" \"}\r\n                        {isEditAble && (\r\n                          <EditIcon\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={() => {\r\n                              setCommentOpen(false);\r\n                            }}\r\n                            fontSize=\"small\"\r\n                          />\r\n                        )}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  justifyContent=\"flex-end\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item>\r\n                    <Box>\r\n                      {UseChipToDisplayComment === true && (\r\n                        <ChipComponent\r\n                          color=\"warning\"\r\n                          variant={\"default\"}\r\n                          label={Comment}\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n`"],"names":["codeSnippet"],"mappings":"ovCAAQ,MAAOA,EAAc}